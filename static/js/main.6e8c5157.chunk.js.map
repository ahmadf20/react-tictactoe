{"version":3,"sources":["index.js"],"names":["Square","props","className","isSelected","isHighlighted","onClick","Provider","value","color","size","Board","i","console","log","this","winner","squares","location","includes","rowItem","colItem","j","push","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","stepNumber","slice","length","calculateWinner","setState","concat","step","index","row","Math","trunc","col","status","current","moves","map","move","loct","getLoct","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6e8c5157.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nimport { MdClose } from \"react-icons/md\";\nimport { BiCircle } from \"react-icons/bi\";\nimport { IconContext } from \"react-icons\";\n\n\n\nfunction Square(props) {\n\n\n    return (\n        <button\n            className={`square \n                ${props.isSelected && 'selected'} \n                ${props.isHighlighted && 'highlighted'}`}\n            onClick={props.onClick}\n        >\n            <IconContext.Provider value={{ color: `${props.value === 'X' ? \"blue\" : \"red\"}`, size: \"2em\" }}>\n                {props.value === 'X' ? <MdClose />\n                    : props.value === 'O' ? <BiCircle />\n                        : null}\n            </IconContext.Provider>\n\n        </button>\n    );\n}\n\nclass Board extends React.Component {\n\n    renderSquare(i) {\n        console.log(this.props.winner);\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                isSelected={this.props.location === i}\n                isHighlighted={this.props.winner != null && this.props.winner.includes(i)}\n            />\n        );\n    }\n\n    render() {\n        const rowItem = [];\n\n        for (let i = 0; i < 9; i += 3) {\n\n            const colItem = [];\n            for (let j = 0; j < 3; j++) {\n                colItem.push(this.renderSquare(i + j));\n            }\n\n            rowItem.push(\n                <div className=\"board-row\">\n                    {colItem}\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {rowItem}\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = ({\n            history: [{\n                squares: Array(9).fill(null),\n                location: null, //display the location for each move\n            }],\n            xIsNext: true,\n            stepNumber: 0,\n        });\n    }\n\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (squares[i] || calculateWinner(squares)) {\n            return;\n        }\n\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\n        this.setState({\n            history: history.concat([{\n                squares: squares,\n                location: i,\n            }]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length,\n\n        });\n    }\n\n    jumpTo(step) {\n        const history = this.state.history.slice(0, step + 1);\n        this.setState({\n            stepNumber: step,\n            xIsNext: (step % 2) === 0,\n            history: history,\n        })\n    }\n\n    getLoct(index) {\n        return {\n            row: Math.trunc(index / 3),\n            col: index % 3,\n        }\n    }\n\n\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => { //TODO fix this\n            //move is the index of the step in the array history\n            //step is the history object which is a squares\n            const loct = this.getLoct(step.location);\n            const desc = move ? 'Go to move #' + move + ' (' + loct.col + ', ' + loct.row + ')' : 'Go to game start';\n            return (\n                <li key={move}>\n                    {/* key is used to differ one item to the others in the list */}\n                    <button\n                        className=\"btn btn-outline-dark my-1\"\n                        onClick={() => this.jumpTo(move)}>\n                        {desc}\n                    </button>\n                </li>\n            );\n        });\n\n        let status;\n\n        if (winner) {\n            status = 'Winner: ' + current.squares[winner[0]];\n        } else {\n            if (current.squares.includes(null)) {\n                status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n            } else {\n                status = 'Draw';\n            }\n        }\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        location={current.location}\n                        winner={winner}\n                        onClick={(i) => this.handleClick(i)}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div className=\"mb-3 ml-3\">{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n\n\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n            return lines[i];\n        }\n\n    }\n\n    return null;\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}